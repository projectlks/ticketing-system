// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  role       String   @default("USER") // default role is USER
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false) // to mark accounts as archived

  createdId String? // FK to creator user
  creator     User?   @relation("CreatedUsers", fields: [createdId], references: [id])

  updatedId String? // FK to last updater user
  updater     User?   @relation("UpdatedUsers", fields: [updatedId], references: [id])

  createdUsers User[] @relation("CreatedUsers") // Users created by this user
  updatedUsers User[] @relation("UpdatedUsers") // Users updated by this user

  createdDepartments Department[] @relation("DepartmentCreators") // User တစ်ယောက်က ဖန်တီးထားတဲ့ Department အများ
  managedDepartments Department[] @relation("DepartmentManager")
  updatedDepartments Department[] @relation("DepartmentUpdaters")
  createdCategories Category[] @relation("CategoryCreators") // User တစ်ယောက်က ဖန်တီးထားတဲ့ Category အများ
  updatedCategories Category[] @relation("CategoryUpdaters") // User တစ်ယောက်က အပ်ဒိတ်လုပ်ထားတဲ့ Category အများ
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  contact     String?
  email       String?

  managerId   String?  
  manager     User?    @relation("DepartmentManager", fields: [managerId], references: [id])

  creatorId   String?  
  creator     User?    @relation("DepartmentCreators", fields: [creatorId], references: [id])

  updaterId   String?  
  updater     User?    @relation("DepartmentUpdaters", fields: [updaterId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isArchived  Boolean  @default(false)

  @@index([isArchived])

  @@map("department")
}



model Category {
  id          String   @id @default(cuid())
  name        String

  creatorId   String?  
  creator     User?    @relation("CategoryCreators", fields: [creatorId], references: [id])

  updaterId   String?  
  updater     User?    @relation("CategoryUpdaters", fields: [updaterId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isArchived  Boolean  @default(false)

  @@index([isArchived])

  @@map("category")
}
