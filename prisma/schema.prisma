generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// Enums
// ======================
enum Role {
  REQUESTER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ======================
// User model
// ======================
model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(REQUESTER)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)
  profileUrl String?

  // HR fields
  employeeId       String?
  status           String?
  workMobile       String?
  personalPhone    String?
  address          String?
  personalEmail    String?
  language         String?
  emergencyContact String?
  emergencyPhone   String?
  nationality      String?
  identificationNo String?
  passportNo       String?
  dateOfBirth      DateTime?
  maritalStatus    String?
  numberOfChildren Int?

  // Relations: created/updated users
  creatorId    String?
  creator      User?   @relation("CreatedUsers", fields: [creatorId], references: [id])
  updaterId    String?
  updater      User?   @relation("UpdatedUsers", fields: [updaterId], references: [id])
  createdUsers User[]  @relation("CreatedUsers")
  updatedUsers User[]  @relation("UpdatedUsers")

  // Departments
  createdDepartments Department[] @relation("DepartmentCreators")
  managedDepartments Department[] @relation("DepartmentManager")
  updatedDepartments Department[] @relation("DepartmentUpdaters")

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Categories
  createdCategories Category[] @relation("CategoryCreators")
  updatedCategories Category[] @relation("CategoryUpdaters")

  // Job Positions
  jobPositionId       String?
  jobPosition         JobPosition?  @relation(fields: [jobPositionId], references: [id])
  createdJobPositions JobPosition[] @relation("JobPositionCreator")

  // Tickets
  requestTickets  Ticket[]      @relation("TicketRequester")
  assignedTickets Ticket[]      @relation("TicketAssignedTo")
  likes           CommentLike[]

  // Audits & Comments
  audits       Audit[]
  comments     Comment[]
  views        TicketView[]
  sessions     UserSession[] // ✅ ဒီ line ကို ထည့်ရမယ်
  UserActivity UserActivity[]
}

// ======================
// Department model
// ======================
model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  contact     String?
  email       String?

  managerId String?
  manager   User?   @relation("DepartmentManager", fields: [managerId], references: [id])

  creatorId String?
  creator   User?   @relation("DepartmentCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("DepartmentUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  tickets   Ticket[]      @relation("DepartmentTickets")
  positions JobPosition[]
  users     User[] // all users in this department

  @@index([isArchived])
  @@map("department")
}

// ======================
// JobPosition model
// ======================
model JobPosition {
  id   String @id @default(cuid())
  name String

  // Department relation
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  users User[] // Users assigned to this job position

  // Creator
  creatorId String?
  creator   User?    @relation("JobPositionCreator", fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================
// Category model
// ======================
model Category {
  id   String @id @default(cuid())
  name String

  creatorId String?
  creator   User?   @relation("CategoryCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("CategoryUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  parentId      String?
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")

  tickets    Ticket[] @relation("CategoryTickets")
  subTickets Ticket[] @relation("SubcategoryTickets")

  @@index([isArchived])
  @@map("category")
}

// ======================
// Ticket model
// ======================
model Ticket {
  id          String @id @default(cuid())
  ticketId    String @map("ticket_id")
  title       String @db.VarChar(100)
  description String

  categoryId String
  category   Category @relation("CategoryTickets", fields: [categoryId], references: [id])

  subcategoryId String
  subcategory   Category @relation("SubcategoryTickets", fields: [subcategoryId], references: [id])

  departmentId String
  department   Department @relation("DepartmentTickets", fields: [departmentId], references: [id])

  requesterId String
  requester   User   @relation("TicketRequester", fields: [requesterId], references: [id])

  status Status @default(OPEN)

  assignedToId String?
  assignedTo   User?   @relation("TicketAssignedTo", fields: [assignedToId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attached  String?

  priority   Priority @default(MEDIUM)
  isArchived Boolean  @default(false)

  // images   TicketImage[]
  // comments Comment[]

  // views TicketView[]

  images   TicketImage[]
  comments Comment[]
  views    TicketView[]

  @@index([departmentId])
  @@index([assignedToId])
}

// ======================
// TicketImage model
// ======================
model TicketImage {
  id       String @id @default(cuid())
  url      String
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model TicketView {
  id       String   @id @default(cuid())
  ticketId String
  userId   String
  viewedAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@unique([ticketId, userId]) // တယောက်ကြိမ်တခါထက်မမြောက်နေရအောင် unique ထား
}

// ======================
// Comment model
// ======================
model Comment {
  id       String  @id @default(cuid())
  content  String?
  imageUrl String?

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  commenterId String
  commenter   User   @relation(fields: [commenterId], references: [id])

  parentId String?
  parent   Comment?  @relation("CommentToSubComments", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentToSubComments")

  likes     CommentLike[]
  createdAt DateTime      @default(now())
}

// ======================
// CommentLike model
// ======================
model CommentLike {
  id        String  @id @default(cuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

// ======================
// Audit model
// ======================
model Audit {
  id        String   @id @default(cuid())
  changedAt DateTime @default(now())

  entity   String
  entityId String

  field    String
  oldValue String?
  newValue String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  actionType String? @ignore

  @@index([entity, entityId])
  @@index([changedAt])
  @@map("audit")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  device    String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  lastSeen  DateTime @default(now()) // heartbeat timestamp
}

model UserActivity {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  action ActivityAction

  createdAt DateTime @default(now())
}

enum ActivityAction {
  LOGIN
  LOGOUT
}
