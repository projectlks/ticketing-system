generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// Enums
// ======================
enum Role {
  REQUESTER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ======================
// User model
// ======================
model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(REQUESTER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  // Relations: created/updated users
  creatorId String?
  creator   User?   @relation("CreatedUsers", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("UpdatedUsers", fields: [updaterId], references: [id])

  createdUsers User[] @relation("CreatedUsers")
  updatedUsers User[] @relation("UpdatedUsers")

  // Departments
  createdDepartments Department[] @relation("DepartmentCreators")
  managedDepartments Department[] @relation("DepartmentManager")
  updatedDepartments Department[] @relation("DepartmentUpdaters")

  // Categories
  createdCategories Category[] @relation("CategoryCreators")
  updatedCategories Category[] @relation("CategoryUpdaters")

  // Tickets
  requestTickets  Ticket[] @relation("TicketRequester")
  assignedTickets Ticket[] @relation("TicketAssignedTo")

  // Audits
  audits Audit[]
}

// ======================
// Department model
// ======================
model Department {
  id          String  @id @default(cuid())
  name        String
  description String?
  contact     String?
  email       String?

  managerId String?
  manager   User?   @relation("DepartmentManager", fields: [managerId], references: [id])

  creatorId String?
  creator   User?   @relation("DepartmentCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("DepartmentUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  tickets Ticket[] @relation("DepartmentTickets")
  // audits  Audit[]

  @@index([isArchived])
  @@map("department")
}

// ======================
// Category model
// ======================
model Category {
  id   String @id @default(cuid())
  name String

  creatorId String?
  creator   User?   @relation("CategoryCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("CategoryUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  tickets Ticket[] @relation("CategoryTickets")
  // audits  Audit[]

  @@index([isArchived])
  @@map("category")
}

// ======================
// Ticket model
// ======================
model Ticket {
  id          String @id @default(cuid())
  ticketId    String @map("ticket_id")
  title       String @db.VarChar(100)
  description String

  categoryId String   @map("category_id")
  category   Category @relation("CategoryTickets", fields: [categoryId], references: [id])

  departmentId String     @map("department_id")
  department   Department @relation("DepartmentTickets", fields: [departmentId], references: [id])

  requesterId String @map("requester_id")
  requester   User   @relation("TicketRequester", fields: [requesterId], references: [id])


  status String @default("OPEN") @map("status") // OPEN, IN_PROGRESS, RESOLVED, CLOSED

  assignedToId String? @map("assigned_to_id")
  assignedTo   User?   @relation("TicketAssignedTo", fields: [assignedToId], references: [id])

  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  attached  String?

  priority   Priority @default(MEDIUM)
  isArchived Boolean  @default(false)

  // audits Audit[]
}

// ======================
// Audit model
// ======================
model Audit {
  id        String   @id @default(cuid())
  changedAt DateTime @default(now())

  // Entity info (polymorphic handled via strings)
  entity   String // "User" | "Department" | "Category" | "Ticket"
  entityId String // ID of the changed entity

  field    String
  oldValue String?
  newValue String?

  // Who made the change
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Optional linking if you want to query by relation directly

  @@index([entity, entityId])
  @@index([changedAt])
  @@map("audit")
}
