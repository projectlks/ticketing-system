generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// Enums
// ======================
enum Role {
  REQUESTER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ======================
// User model
// ======================
model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(REQUESTER)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)
  profileUrl String?

  // HR fields
  employee_id        String?
  department         String?
  manager            String?
  status             String?
  work_mobile        String?
  personal_phone     String?
  address            String?
  personal_email     String?
  language           String?
  emergency_contact  String?
  emergency_phone    String?
  nationality        String?
  identification_no  String?
  passport_no        String?
  date_of_birth      DateTime?
  marital_status     String?
  number_of_children Int?

  // Relations: created/updated users
  creatorId    String?
  creator      User?   @relation("CreatedUsers", fields: [creatorId], references: [id])
  updaterId    String?
  updater      User?   @relation("UpdatedUsers", fields: [updaterId], references: [id])
  createdUsers User[]  @relation("CreatedUsers")
  updatedUsers User[]  @relation("UpdatedUsers")

  // Departments
  createdDepartments Department[] @relation("DepartmentCreators")
  managedDepartments Department[] @relation("DepartmentManager")
  updatedDepartments Department[] @relation("DepartmentUpdaters")

  // Categories
  createdCategories Category[] @relation("CategoryCreators")
  updatedCategories Category[] @relation("CategoryUpdaters")

  // Job Positions
  jobPositionId       String?
  jobPosition         JobPosition?  @relation(fields: [jobPositionId], references: [id]) // assigned position
  createdJobPositions JobPosition[] @relation("JobPositionCreator") // positions created by this user

  // Tickets
  requestTickets  Ticket[]      @relation("TicketRequester")
  assignedTickets Ticket[]      @relation("TicketAssignedTo")
  likes           CommentLike[] // references User via CommentLike

  // Audits & Comments
  audits   Audit[]
  comments Comment[]
}

// ======================
// Department model
// ======================
model Department {
  id          String  @id @default(cuid())
  name        String
  description String?
  contact     String?
  email       String?

  managerId String?
  manager   User?   @relation("DepartmentManager", fields: [managerId], references: [id])

  creatorId String?
  creator   User?   @relation("DepartmentCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("DepartmentUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  tickets   Ticket[]      @relation("DepartmentTickets")
  positions JobPosition[]

  @@index([isArchived])
  @@map("department")
}

// ======================
// JobPosition model
// ======================
model JobPosition {
  id    String @id @default(uuid()) // UUID for uniqueness
  title String

  // Department relation
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  // Users assigned to this job position (many-to-many)
  users User[]

  // Creator of this JobPosition (optional)
  creatorId String?
  creator   User?    @relation("JobPositionCreator", fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
}

// ======================
// Category model
// ======================
model Category {
  id   String @id @default(cuid())
  name String

  creatorId String?
  creator   User?   @relation("CategoryCreators", fields: [creatorId], references: [id])

  updaterId String?
  updater   User?   @relation("CategoryUpdaters", fields: [updaterId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  tickets Ticket[] @relation("CategoryTickets")

  @@index([isArchived])
  @@map("category")
}

// ======================
// Ticket model
// ======================
model Ticket {
  id          String @id @default(cuid())
  ticketId    String @map("ticket_id")
  title       String @db.VarChar(100)
  description String

  categoryId String
  category   Category @relation("CategoryTickets", fields: [categoryId], references: [id])

  departmentId String
  department   Department @relation("DepartmentTickets", fields: [departmentId], references: [id])

  requesterId String
  requester   User   @relation("TicketRequester", fields: [requesterId], references: [id])

  status Status @default(OPEN)

  assignedToId String?
  assignedTo   User?   @relation("TicketAssignedTo", fields: [assignedToId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attached  String?

  priority   Priority @default(MEDIUM)
  isArchived Boolean  @default(false)

  images   TicketImage[]
  comments Comment[]
}

// ======================
// TicketImage model
// ======================
model TicketImage {
  id        String   @id @default(cuid())
  url       String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

// ======================
// Comment model
// ======================
model Comment {
  id       String  @id @default(cuid())
  content  String?
  imageUrl String?

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  commenterId String
  commenter   User   @relation(fields: [commenterId], references: [id])

  parentId String?
  parent   Comment?  @relation("CommentToSubComments", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToSubComments")

  likes     CommentLike[]
  createdAt DateTime      @default(now())
}

// ======================
// CommentLike model
// ======================
model CommentLike {
  id        String  @id @default(cuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

// ======================
// Audit model
// ======================
model Audit {
  id        String   @id @default(cuid())
  changedAt DateTime @default(now())

  entity   String
  entityId String

  field    String
  oldValue String?
  newValue String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  actionType String? @ignore

  @@index([entity, entityId])
  @@index([changedAt])
  @@map("audit")
}
